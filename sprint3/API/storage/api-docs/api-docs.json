{
    "openapi": "3.0.0",
    "info": {
        "title": "Toolshop API",
        "description": "Toolshop REST API technical description",
        "contact": {
            "name": "Testsmith",
            "email": "info@testsmith.io"
        },
        "version": "3.0.0"
    },
    "servers": [
        {
            "url": "https://api-v3.practicesoftwaretesting.com",
            "description": "Deployed environment"
        },
        {
            "url": "http://localhost:8091",
            "description": "Local environment"
        }
    ],
    "paths": {
        "/brands": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Retrieve all brands",
                "description": "Retrieve all brands",
                "operationId": "getBrands",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BrandResponse"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ResourceNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            },
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Store new brand",
                "description": "Store new brand",
                "operationId": "storeBrand",
                "requestBody": {
                    "description": "Brand request object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BrandRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrandResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/brands/{brandId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Retrieve specific brand",
                "description": "Retrieve specific brand",
                "operationId": "getBrand",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "The brandId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrandResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update specific brand",
                "description": "Update specific brand",
                "operationId": "updateBrand",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "The brandId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Brand request object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BrandRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/UpdateResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntityResponse"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Delete specific brand",
                "description": "Delete a specific brand",
                "operationId": "deleteBrand",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "The brandId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/brands/search": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Retrieve specific brands matching the search query",
                "description": "Search is performed on the `name` column",
                "operationId": "searchBrand",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "A query phrase",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BrandResponse"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ResourceNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            }
        },
        "/categories/tree": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Retrieve all categories (including subcategories)",
                "description": "Retrieve all categories (including subcategories)",
                "operationId": "getCategoriesTree",
                "parameters": [
                    {
                        "name": "by_category_slug",
                        "in": "query",
                        "description": "Parent category slug",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CategoryTreeResponse"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ResourceNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Retrieve all categories",
                "description": "Retrieve all categories",
                "operationId": "getCategories",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CategoryResponse"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ResourceNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            },
            "post": {
                "tags": [
                    "Category"
                ],
                "summary": "Store new category",
                "description": "Store new category",
                "operationId": "storeCategory",
                "requestBody": {
                    "description": "Category request object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/categories/tree/{categoryId}": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Retrieve specific category (including subcategories)",
                "description": "Retrieve specific category (including subcategories)",
                "operationId": "getCategory",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "The categoryId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryTreeResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            }
        },
        "/categories/search": {
            "get": {
                "tags": [
                    "Category"
                ],
                "summary": "Retrieve specific categories matching the search query",
                "description": "Search is performed on the `name` column",
                "operationId": "searchCategory",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "A query phrase",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CategoryResponse"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ResourceNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            }
        },
        "/categories/{categoryId}": {
            "put": {
                "tags": [
                    "Category"
                ],
                "summary": "Update specific category",
                "description": "Update specific category",
                "operationId": "updateCategory",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "The categoryId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "requestBody": {
                    "description": "Category request object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/UpdateResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ResourceNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntityResponse"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Category"
                ],
                "summary": "Delete specific category",
                "description": "Delete a specific category",
                "operationId": "deleteCategory",
                "parameters": [
                    {
                        "name": "categoryId",
                        "in": "path",
                        "description": "The categoryId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/images": {
            "get": {
                "tags": [
                    "Image"
                ],
                "summary": "Retrieve all images",
                "description": "Retrieve all images",
                "operationId": "getImages",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ImageResponse"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            }
        },
        "/invoices": {
            "get": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Retrieve all invoices",
                "description": "Retrieves invoices",
                "operationId": "getInvoices",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "pagenumber",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "PaginatedInvoiceResponse",
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InvoiceResponse"
                                            }
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "last_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "total": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            },
            "post": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Store new invoice",
                "description": "Store new invoice",
                "operationId": "storeInvoice",
                "requestBody": {
                    "description": "Invoice request object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvoiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/invoices/{invoiceId}": {
            "get": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Retrieve specific invoice",
                "description": "Retrieve specific invoice",
                "operationId": "getInvoice",
                "parameters": [
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "The invoiceId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Delete specific invoice",
                "description": "",
                "operationId": "deleteInvoice",
                "parameters": [
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "The invoiceId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/invoices/{invoiceId}/status": {
            "put": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Update invoice status",
                "description": "Update invoice status",
                "operationId": "updateInvoiceStatus",
                "parameters": [
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "The invoiceId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "description": "The status of the order",
                                        "type": "string",
                                        "enum": [
                                            "AWAITING_FULFILLMENT",
                                            "ON_HOLD",
                                            "AWAITING_SHIPMENT",
                                            "SHIPPED",
                                            "COMPLETED"
                                        ]
                                    },
                                    "status_message": {
                                        "description": "A message describing the status",
                                        "type": "string",
                                        "maxLength": 50,
                                        "minLength": 5,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/UpdateResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/invoices/search": {
            "get": {
                "tags": [
                    "Invoice"
                ],
                "summary": "Retrieve specific invoices matching the search query",
                "description": "Search is performed on the `invoice_number`, `billing_address` and `status` column",
                "operationId": "searchInvoice",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "A query phrase",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "pagenumber",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "PaginatedInvoiceResponse",
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InvoiceResponse"
                                            }
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "last_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "total": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            }
        },
        "/payment/check": {
            "post": {
                "tags": [
                    "Payment"
                ],
                "summary": "Check payment",
                "description": "Check payment",
                "operationId": "checkPayment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "PaymentRequest",
                                "properties": {
                                    "method": {
                                        "type": "string",
                                        "example": "Credit Card"
                                    },
                                    "account_name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "account_number": {
                                        "type": "string",
                                        "example": "9876543XX"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "PaymentResponse",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "Success status"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Retrieve all products",
                "description": "Retrieve all products",
                "operationId": "getProducts",
                "parameters": [
                    {
                        "name": "by_brand",
                        "in": "query",
                        "description": "Id of brand",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "by_category",
                        "in": "query",
                        "description": "Id of category",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is_rental",
                        "in": "query",
                        "description": "Indication if we like to retrieve rentals products",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Can be used to sort based on specific column value, like: name,asc OR name,desc OR price,asc OR price,desc",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "pagenumber",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "PaginatedProductResponse",
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductResponse"
                                            }
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "last_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "total": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            },
            "post": {
                "tags": [
                    "Product"
                ],
                "summary": "Store new product",
                "description": "Store new product",
                "operationId": "storeProduct",
                "requestBody": {
                    "description": "Product request object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns when product is created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "StoreProductResponse",
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Lorum ipsum"
                                        },
                                        "description": {
                                            "type": "string",
                                            "example": "Lorum ipsum"
                                        },
                                        "price": {
                                            "type": "number",
                                            "example": 9.99
                                        },
                                        "is_location_offer": {
                                            "type": "boolean",
                                            "example": 1
                                        },
                                        "is_rental": {
                                            "type": "boolean",
                                            "example": 0
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/products/{productId}": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Retrieve specific product",
                "description": "Retrieve specific product",
                "operationId": "getProduct",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "The productId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            },
            "put": {
                "tags": [
                    "Product"
                ],
                "summary": "Update specific product",
                "description": "Update specific product",
                "operationId": "updateProduct",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "The productId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Product request object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/UpdateResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntityResponse"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Product"
                ],
                "summary": "Delete specific product",
                "description": "Delete a specific product",
                "operationId": "deleteProduct",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "The productId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/products/{productId}/related": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Retrieve related products",
                "description": "Retrieve related products",
                "operationId": "getRelatedProducts",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "The productId parameter in path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductResponse"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            }
        },
        "/products/search": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Retrieve specific products matching the search query",
                "description": "Search is performed on the `name` column",
                "operationId": "searchProduct",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "A query phrase",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "pagenumber",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "PaginatedProductResponse",
                                    "properties": {
                                        "current_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductResponse"
                                            }
                                        },
                                        "from": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "last_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "per_page": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "to": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "total": {
                                            "type": "integer",
                                            "example": 1
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ItemNotFoundResponse"
                    },
                    "405": {
                        "$ref": "#/components/responses/MethodNotAllowedResponse"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "BrandRequest": {
                "title": "BrandRequest",
                "properties": {
                    "name": {
                        "description": "",
                        "type": "string",
                        "example": "new brand"
                    },
                    "slug": {
                        "description": "URL part, words separated by hyphen",
                        "type": "string",
                        "example": "new-brand"
                    }
                },
                "type": "object"
            },
            "BrandResponse": {
                "title": "BrandResponse",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "example": "new brand"
                    },
                    "slug": {
                        "type": "string",
                        "example": "new-brand"
                    }
                },
                "type": "object"
            },
            "CategoryRequest": {
                "title": "CategoryRequest",
                "properties": {
                    "name": {
                        "description": "",
                        "type": "string",
                        "example": "new category"
                    },
                    "slug": {
                        "description": "URL part, words separated by hyphen",
                        "type": "string",
                        "example": "new-category"
                    }
                },
                "type": "object"
            },
            "CategoryTreeResponse": {
                "title": "CategoryTreeResponse",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "parent_id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "example": "new category"
                    },
                    "slug": {
                        "type": "string",
                        "example": "new-category"
                    },
                    "sub_categories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CategoryResponse"
                        }
                    }
                },
                "type": "object"
            },
            "CategoryResponse": {
                "title": "CategoryResponse",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "parent_id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "example": "new category"
                    },
                    "slug": {
                        "type": "string",
                        "example": "new-category"
                    }
                },
                "type": "object"
            },
            "InvoiceRequest": {
                "title": "InvoiceRequest",
                "properties": {
                    "first_name": {
                        "type": "string",
                        "example": "John"
                    },
                    "last_name": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "email": {
                        "type": "string",
                        "example": "john.doe@example.com"
                    },
                    "billing_address": {
                        "type": "string"
                    },
                    "billing_city": {
                        "type": "string"
                    },
                    "billing_country": {
                        "type": "string"
                    },
                    "billing_state": {
                        "type": "string"
                    },
                    "billing_postcode": {
                        "type": "string"
                    },
                    "total": {
                        "type": "number"
                    },
                    "payment_method": {
                        "type": "string",
                        "example": "Cash on Delivery"
                    },
                    "payment_account_name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "payment_account_number": {
                        "type": "string",
                        "example": "0987654345"
                    },
                    "invoicelines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InvoiceLineResponse"
                        }
                    }
                },
                "type": "object"
            },
            "InvoiceResponse": {
                "title": "InvoiceResponse",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "invoice_date": {
                        "type": "string",
                        "example": "2022-10-20 09:49:45"
                    },
                    "invoice_number": {
                        "type": "string",
                        "example": "INV-2022000002"
                    },
                    "billing_address": {
                        "type": "string"
                    },
                    "billing_city": {
                        "type": "string"
                    },
                    "billing_country": {
                        "type": "string"
                    },
                    "billing_state": {
                        "type": "string"
                    },
                    "billing_postcode": {
                        "type": "string"
                    },
                    "total": {
                        "type": "number"
                    },
                    "payment_method": {
                        "type": "string",
                        "example": "Cash on Delivery"
                    },
                    "payment_account_name": {
                        "type": "string",
                        "example": "Jogn Doe"
                    },
                    "payment_account_number": {
                        "type": "string",
                        "example": "0987654345"
                    },
                    "status": {
                        "type": "string",
                        "example": "COMPLETED"
                    },
                    "status_message": {
                        "type": "string",
                        "example": ""
                    },
                    "invoice_items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/InvoiceLineResponse"
                        }
                    }
                },
                "type": "object"
            },
            "InvoiceLineResponse": {
                "title": "InvoiceLineResponse",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "unit_price": {
                        "type": "number"
                    },
                    "quantity": {
                        "type": "integer"
                    },
                    "product": {
                        "$ref": "#/components/schemas/ProductResponse"
                    }
                },
                "type": "object"
            },
            "ProductRequest": {
                "title": "ProductRequest",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "price": {
                        "type": "number",
                        "example": 1.99
                    },
                    "category_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "brand_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "product_image_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "is_location_offer": {
                        "type": "boolean",
                        "example": 1
                    },
                    "is_rental": {
                        "type": "boolean",
                        "example": 0
                    }
                },
                "type": "object"
            },
            "ProductResponse": {
                "title": "ProductResponse",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "new brand"
                    },
                    "description": {
                        "type": "string",
                        "example": "Lorum ipsum"
                    },
                    "price": {
                        "type": "number",
                        "example": 9.99
                    },
                    "is_location_offer": {
                        "type": "boolean",
                        "example": 1
                    },
                    "is_rental": {
                        "type": "boolean",
                        "example": 0
                    },
                    "brand": {
                        "$ref": "#/components/schemas/BrandResponse"
                    },
                    "category": {
                        "$ref": "#/components/schemas/CategoryResponse"
                    },
                    "product_image": {
                        "$ref": "#/components/schemas/ImageResponse"
                    }
                },
                "type": "object"
            },
            "ImageResponse": {
                "title": "ImageResponse",
                "properties": {
                    "by_name": {
                        "type": "string"
                    },
                    "by_url": {
                        "type": "string"
                    },
                    "source_name": {
                        "type": "string"
                    },
                    "source_url": {
                        "type": "string"
                    },
                    "file_name": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "responses": {
            "UpdateResponse": {
                "description": "Result of the update",
                "content": {
                    "application/json": {
                        "schema": {
                            "title": "UpdateResponse",
                            "properties": {
                                "success": {
                                    "type": "boolean",
                                    "example": true
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "UnauthorizedResponse": {
                "description": "Returns when user is not authenticated",
                "content": {
                    "application/json": {
                        "schema": {
                            "title": "UnauthorizedResponse",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Unauthorized"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "ItemNotFoundResponse": {
                "description": "Returns when the resource is not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "title": "ItemNotFoundResponse",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Requested item not found"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "ResourceNotFoundResponse": {
                "description": "Returns when the resource is not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "title": "ResourceNotFoundResponse",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Resource not found"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "ConflictResponse": {
                "description": "Returns when the entity is used elsewhere"
            },
            "MethodNotAllowedResponse": {
                "description": "Returns when the method is not allowed for the requested route",
                "content": {
                    "application/json": {
                        "schema": {
                            "title": "MethodNotAllowedResponse",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Method is not allowed for the requested route"
                                }
                            },
                            "type": "object"
                        }
                    }
                }
            },
            "UnprocessableEntityResponse": {
                "description": "Returns when the server was not able to process the content"
            }
        }
    }
}