{
	"info": {
		"_postman_id": "085269f8-1a64-4c2d-8e1a-060d97038326",
		"name": "API3 - TC",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21686506"
	},
	"item": [
		{
			"name": "Log In",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Clear previous run's variables for a clean test",
							"pm.environment.unset(\"auth_token\");",
							"pm.environment.unset(\"logged_in_user_id\");",
							"",
							"if (pm.response.code === 200) {",
							"    const responseData = pm.response.json();",
							"    if (responseData.access_token) {",
							"        const accessToken = responseData.access_token;",
							"        pm.environment.set(\"auth_token\", accessToken);",
							"        console.log(\"Auth token saved.\");",
							"        try {",
							"            // Decode the JWT payload to get the user ID ('sub' claim)",
							"            const payload = JSON.parse(atob(accessToken.split('.')[1]));",
							"            const userId = payload.sub;",
							"            if (userId) {",
							"                pm.environment.set(\"logged_in_user_id\", userId);",
							"                console.log(`Logged in user ID saved: ${userId}`);",
							"            }",
							"        } catch (e) {",
							"            console.error(\"Error decoding token:\", e);",
							"        }",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8091/users/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8091",
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Invoices",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const expectedStatusCode = pm.iterationData.get(\"expectedStatusCode\");",
							"const testName = pm.iterationData.get(\"testName\");",
							"",
							"pm.test(`${testName} - Status code is ${expectedStatusCode}`, function () {",
							"    pm.response.to.have.status(parseInt(expectedStatusCode));",
							"});",
							"",
							"// Only run deeper validation on successful responses",
							"if (pm.response.code === 200) {",
							"    const jsonData = pm.response.json();",
							"",
							"    // Test case: User should only see their own invoices",
							"    if (testName.includes(\"User gets only their own\")) {",
							"        const loggedInUserId = pm.environment.get(\"logged_in_user_id\");",
							"        pm.test(\"All returned invoices belong to the logged-in user\", function () {",
							"            let allMatch = true;",
							"            if (!jsonData.data || jsonData.data.length === 0) {",
							"                // If there are no invoices, the test passes trivially.",
							"                return;",
							"            }",
							"            for (const invoice of jsonData.data) {",
							"                if (invoice.user_id !== loggedInUserId) {",
							"                    allMatch = false;",
							"                    break; // Exit loop on first mismatch",
							"                }",
							"            }",
							"            pm.expect(allMatch, \"Found an invoice belonging to another user\").to.be.true;",
							"        });",
							"    }",
							"",
							"    // Test case: Pagination",
							"    if (testName.includes(\"Pagination test\")) {",
							"        pm.test(\"Response is on the correct page\", function() {",
							"             pm.expect(jsonData.current_page).to.eql(2);",
							"             pm.expect(jsonData.per_page).to.eql(5);",
							"        });",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8091/invoices",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8091",
					"path": [
						"invoices"
					],
					"query": [
						{
							"key": "{{queryParams}}",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}