{
	"info": {
		"_postman_id": "6113338e-8017-4c4f-8579-a6ab875e15da",
		"name": "API1 - TC",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21686506"
	},
	"item": [
		{
			"name": "Log In",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Clear environment variables from previous run",
							"pm.environment.unset(\"auth_token\");",
							"pm.environment.unset(\"user_id\");",
							"",
							"const responseData = pm.response.json();",
							"if (pm.response.code === 200 && responseData.access_token) {",
							"    const accessToken = responseData.access_token;",
							"    pm.environment.set(\"auth_token\", accessToken);",
							"    try {",
							"        const tokenParts = accessToken.split('.');",
							"        const payload = JSON.parse(atob(tokenParts[1]));",
							"        const userId = payload.sub;",
							"        if (userId) {",
							"            pm.environment.set(\"user_id\", userId);",
							"        }",
							"    } catch (e) {",
							"        console.error(\"Error decoding token:\", e);",
							"    }",
							"} else {",
							"    console.log(\"Login failed or no token received, subsequent requests will be unauthorized.\")",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8091/users/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8091",
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// This script is enhanced to allow overriding the product_id from the CSV.",
							"const overrideProductId = pm.iterationData.get(\"override_product_id\");",
							"",
							"if (overrideProductId) {",
							"    // If an override ID is present in the CSV, use it directly.",
							"    pm.environment.set(\"product_id\", overrideProductId);",
							"    pm.environment.set(\"unit_price\", 10.00); // Set a dummy price",
							"    console.log(`Using overridden product ID: ${overrideProductId}`);",
							"} else if (pm.response.code === 200) {",
							"    // Otherwise, use the existing logic to get a random product.",
							"    const responseData = pm.response.json();",
							"    if (responseData && responseData.data && responseData.data.length > 0) {",
							"        const products = responseData.data;",
							"        const randomProduct = products[Math.floor(Math.random() * products.length)];",
							"        pm.environment.set(\"product_id\", randomProduct.id);",
							"        pm.environment.set(\"unit_price\", randomProduct.price);",
							"        console.log(`Using random product ID: ${randomProduct.id}`);",
							"    } else {",
							"        console.error(\"No products found in response.\");",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8091/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8091",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Invoices",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const quantity = pm.iterationData.get(\"quantity\");",
							"const unitPrice = pm.environment.get(\"unit_price\");",
							"",
							"// This check prevents errors if login or get product fails",
							"if (quantity && unitPrice) {",
							"    const parsedQuantity = parseFloat(quantity);",
							"    // Check if quantity is a valid number before calculating",
							"    if (!isNaN(parsedQuantity)) {",
							"        const total = parsedQuantity * parseFloat(unitPrice);",
							"        pm.environment.set(\"calculated_total\", total.toFixed(2));",
							"    } else {",
							"        // Handle invalid quantity (e.g., 'abc') by setting total to null",
							"        pm.environment.set(\"calculated_total\", null);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const expectedStatusCode = pm.iterationData.get(\"expectedStatusCode\");",
							"const testName = pm.iterationData.get(\"testName\");",
							"const calculatedTotal = pm.environment.get(\"calculated_total\");",
							"",
							"pm.test(`${testName} - Status code is ${expectedStatusCode}`, function () {",
							"    pm.response.to.have.status(parseInt(expectedStatusCode));",
							"});",
							"",
							"if (pm.response.code === 201) {",
							"    pm.test(\"Response body has correct total and an invoice ID\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property(\"id\");",
							"        pm.expect(jsonData.total).to.eql(parseFloat(calculatedTotal));",
							"        pm.expect(jsonData.billing_address).to.eql(pm.iterationData.get(\"billing_address\"));",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"user_id\": {{user_id}},\n  \"billing_address\": \"{{billing_address}}\",\n  \"billing_city\": \"{{billing_city}}\",\n  \"billing_country\": \"{{billing_country}}\",\n  \"billing_state\": \"{{billing_state}}\",\n  \"billing_postcode\": \"{{billing_postcode}}\",\n  \"total\": {{calculated_total}},\n  \"payment_method\": \"{{payment_method}}\",\n  \"payment_account_name\": \"{{payment_account_name}}\",\n  \"payment_account_number\": \"{{payment_account_number}}\",\n  \"invoice_items\": [\n    {\n      \"product_id\": {{product_id}},\n      \"quantity\": {{quantity}},\n      \"unit_price\": {{unit_price}}\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8091/invoices",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8091",
					"path": [
						"invoices"
					]
				}
			},
			"response": []
		}
	]
}